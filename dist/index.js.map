{"version":3,"sources":["../src/index.js"],"names":["DEFAULT_LIMIT","getServiceSchema","serviceName","link","HttpLink","uri","services","fetch","contextLink","request","prevContext","headers","graphqlContext","concat","makeRemoteExecutableSchema","schema","paginate","query","limit","cursor","desc","sort","_id","where","lte","gte","exec","result","length","items","slice","nextCursor","dependencies","mergeDependencies","typeDefs","resolvers","schemasToMerge","schemas","Promise","all","map","delegateToSchema","fieldName","args","context","info","mergeInfo","operation"],"mappings":"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","sourcesContent":["import {HttpLink} from \"apollo-link-http/lib/index\";\nimport fetch from 'node-fetch'\nimport {introspectSchema, makeRemoteExecutableSchema} from \"graphql-tools/dist/index\";\nimport {setContext} from \"apollo-link-context/lib/index\";\nimport {services} from \"./config\";\nimport mergeSchemas from \"graphql-tools/dist/stitching/mergeSchemas\";\nimport config from './config'\n\nconst DEFAULT_LIMIT = 10;\n\n/**\n * Get the link to another GraphQL service\n * @param serviceName\n * @returns {Promise<>}\n */\nexport async function getServiceSchema(serviceName) {\n    const link = new HttpLink({uri: `http://${services[serviceName]}/graphql`, fetch});\n\n    const contextLink = setContext((request, prevContext) => {\n        return {headers: prevContext.graphqlContext}\n    }).concat(link);\n\n    return makeRemoteExecutableSchema({\n        schema: await introspectSchema(contextLink),\n        link: contextLink,\n    })\n}\n\n/**\n * Paginate the results of mongoose query\n * @param query\n * @param limit\n * @param cursor\n * @param desc\n * @returns {Promise<{nextCursor: *, items: *}|{nextCursor: null, items}>}\n */\nexport async function paginate(query, limit, cursor, desc = false) {\n    limit = limit || DEFAULT_LIMIT;\n    // Fetch one more item\n    query = query.limit(limit + 1);\n    if (desc) query = query.sort({_id: -1});\n    if (cursor) {\n        query = query.where('_id');\n        query = desc ? query.lte(cursor) : query.gte(cursor)\n    }\n    const result = await query.exec();\n    // If the additional item is present, return its id as nextCursor\n    if (result.length === limit + 1) return {\n        items: result.slice(0, -1),\n        nextCursor: result.slice(-1)[0]._id\n    };\n    // else, return null as nextCursor\n    return {items: result, nextCursor: null}\n}\n\nexport const dependencies = {};\n\n/**\n * Merge with schemas that the current service is dependent on\n * @param typeDefs\n * @param resolvers\n * @param schemasToMerge\n * @returns {Promise<>}\n */\nexport async function mergeDependencies(typeDefs, resolvers, schemasToMerge) {\n    const schemas = Promise.all(schemasToMerge.map(async serviceName => {\n        const schema = await getServiceSchema(serviceName);\n        dependencies[serviceName] = schema;\n        return schema\n    }));\n    return mergeSchemas({\n        schemas: [\n            ...schemas,\n            typeDefs,\n        ],\n        resolvers,\n    })\n}\n\n/**\n * Helper for delegating to another schema\n * @param schema\n * @param fieldName\n * @param args\n * @param context\n * @param info\n * @returns {*}\n */\nexport function delegateToSchema({schema, fieldName, args, context, info}) {\n    return info.mergeInfo.delegateToSchema({\n        schema,\n        operation: 'query',\n        fieldName,\n        args,\n        context,\n        info,\n    })\n}\n\nexport {config}\n"],"file":"index.js"}