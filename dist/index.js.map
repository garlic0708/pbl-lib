{"version":3,"sources":["../src/index.js"],"names":["DEFAULT_LIMIT","pushNotification","receiver","content","context","operation","query","gql","variables","headers","link","HttpLink","uri","config","services","fetch","getServiceSchema","serviceName","hasWs","serviceUrl","contextLink","request","prevContext","graphqlContext","concat","schema","subscriptionClient","SubscriptionClient","reconnect","ws","wsLink","WebSocketLink","contextMiddleware","ApolloLink","forward","getContext","wsContextLink","kind","paginate","limit","cursor","desc","sort","_id","where","lte","gte","exec","result","length","items","slice","nextCursor","dependencies","mergeDependencies","typeDefs","resolvers","schemasToMerge","Promise","all","map","schemas","delegateToSchema","schemaName","fieldName","args","info","theSchema","mergeInfo","ctx","req","username","payload"],"mappings":"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","sourcesContent":["import {HttpLink} from \"apollo-link-http/lib/index\";\nimport fetch from 'node-fetch'\nimport {introspectSchema, makeRemoteExecutableSchema} from \"graphql-tools/dist/index\";\nimport {makePromise, execute, ApolloLink} from \"apollo-link\";\nimport gql from 'graphql-tag'\nimport {setContext} from \"apollo-link-context/lib/index\";\nimport mergeSchemas from \"graphql-tools/dist/stitching/mergeSchemas\";\nimport {split, concat} from 'apollo-client-preset'\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {getMainDefinition} from 'apollo-utilities'\nimport ws from 'ws';\nimport { SubscriptionClient } from 'subscriptions-transport-ws/dist/client';\nimport config from './config'\n\nexport config from './config'\n\nconst DEFAULT_LIMIT = 10;\n\n/**\n * Call the notification service's pushNotification mutation\n * @param receiver\n * @param content\n * @param context\n * @returns {Promise<void>}\n */\nexport async function pushNotification(receiver, content, context) {\n    const operation = {\n        query: gql`mutation PushNotification($receiver: ID!, $content: String!) {\n            pushNotification(receiver: $receiver, content: $content) {\n                content\n            }\n        }`,\n        variables: {receiver, content},\n        context: {\n            headers: {...context}\n        },\n    };\n    const link = new HttpLink({uri: `http://${config.services['notification']}/graphql`, fetch});\n    return makePromise(execute(link, operation))\n}\n\n/**\n * Get the link to another GraphQL service\n * @param serviceName\n * @param hasWs\n * @returns {Promise<>}\n */\nexport async function getServiceSchema(serviceName, hasWs = false) {\n\n    const serviceUrl = config.services[serviceName];\n    const link = new HttpLink({uri: `http://${serviceUrl}/graphql`, fetch});\n\n    let contextLink;\n    // Context is passed on to downstream http services with context\n    contextLink = setContext((request, prevContext) => {\n        return {headers: prevContext.graphqlContext}\n    }).concat(link);\n\n    const schema = await introspectSchema(contextLink);\n\n    if (hasWs) {\n        const subscriptionClient = new SubscriptionClient(\n            `ws://${serviceUrl}/graphql`, {\n                reconnect: true\n            }, ws);\n        const wsLink = new WebSocketLink(subscriptionClient);\n\n        // Context is passed on to downstream ws services with payload\n        const contextMiddleware = new ApolloLink((operation, forward) => {\n            operation.context = operation.getContext().graphqlContext;\n            return forward(operation);\n        });\n\n        const wsContextLink = concat(contextMiddleware, wsLink);\n\n        contextLink = split(\n            ({query}) => {\n                const {kind, operation} = getMainDefinition(query);\n                return kind === 'OperationDefinition' && operation === 'subscription'\n            },\n            wsContextLink,\n            contextLink,\n        );\n    }\n\n    return makeRemoteExecutableSchema({\n        schema,\n        link: contextLink,\n    })\n}\n\n/**\n * Paginate the results of mongoose query\n * @param query\n * @param limit\n * @param cursor\n * @param desc\n * @returns {Promise<{nextCursor: *, items: *}|{nextCursor: null, items}>}\n */\nexport async function paginate(query, limit, cursor, desc = false) {\n    limit = limit || DEFAULT_LIMIT;\n    // Fetch one more item\n    query = query.limit(limit + 1);\n    if (desc) query = query.sort({_id: -1});\n    if (cursor) {\n        query = query.where('_id');\n        query = desc ? query.lte(cursor) : query.gte(cursor)\n    }\n    const result = await query.exec();\n    // If the additional item is present, return its id as nextCursor\n    if (result.length === limit + 1) return {\n        items: result.slice(0, -1),\n        nextCursor: result.slice(-1)[0]._id\n    };\n    // else, return null as nextCursor\n    return {items: result, nextCursor: null}\n}\n\nexport const dependencies = {};\n\n/**\n * Merge with schemas that the current service is dependent on\n * @param typeDefs\n * @param resolvers\n * @param schemasToMerge\n * @returns {Promise<>}\n */\nexport async function mergeDependencies(typeDefs, resolvers, schemasToMerge) {\n    const schemas = await Promise.all(schemasToMerge.map(async serviceName => {\n        const schema = await getServiceSchema(serviceName);\n        dependencies[serviceName] = schema;\n        return schema\n    }));\n    return mergeSchemas({\n        schemas: [\n            ...schemas,\n            typeDefs,\n        ],\n        resolvers,\n    })\n}\n\n/**\n * Helper for delegating to another schema\n * @param schema\n * @param schemaName\n * @param operation\n * @param fieldName\n * @param args\n * @param context\n * @param info\n * @returns {*}\n */\nexport function delegateToSchema({schema, schemaName, operation, fieldName, args, context, info}) {\n    const theSchema = schema || dependencies[schemaName];\n    return info.mergeInfo.delegateToSchema({\n        schema: theSchema,\n        operation: operation || 'query',\n        fieldName,\n        args,\n        context,\n        info,\n    })\n}\n\nexport const context = (ctx) => {\n    return ctx.req ? {username: ctx.req.headers['username'] || 'testqq'}\n        : ctx.payload.context || {username: 'testqq'}\n};\n"],"file":"index.js"}